name: CI with Coverage and SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate coverage report
        run: |
          coverage run -m unittest discover
          coverage xml -o cobertura.xml
          coverage report -m > coverage_report.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=dqmdz-um_sample-circleci
            -Dsonar.organization=dqmdz-um
            -Dsonar.python.coverage.reportPaths=cobertura.xml
            -Dsonar.sources=.

      - name: Run Pylint and generate report
        run: |
          pylint --rcfile=.pylintrc main.py test.py > pylint_report.txt || true

      - name: Update README with coverage and pylint reports
        id: update_readme
        run: |
          cat << 'EOF' > update_readme.py
          import re
          import os

          # Function to read file content
          def read_file(filepath):
              if not os.path.exists(filepath):
                  return ""
              with open(filepath, "r") as f:
                  return f.read()

          # Function to update a section in the README
          def update_section(readme_content, section_name, report_content):
              start_marker = f"<!-- {section_name}_START -->"
              end_marker = f"<!-- {section_name}_END -->"
              
              if not report_content.strip():
                  report_content = "No issues found."

              if not report_content.endswith('\n'):
                  report_content += '\n'
              
              title = section_name.replace('_', ' ').title()
              new_section_content = f"## {title}\n\n```text\n{report_content}```"
              
              return re.sub(
                  f"({start_marker})(.*)({end_marker})",
                  f"\1\n{new_section_content}\n\3",
                  readme_content,
                  flags=re.DOTALL,
              )

          # Read reports
          coverage_report = read_file("coverage_report.txt")
          pylint_report = read_file("pylint_report.txt")

          # Read README
          readme = read_file("README.md")

          # Update sections
          readme = update_section(readme, "COVERAGE", coverage_report)
          readme = update_section(readme, "PYLINT", pylint_report)

          # Write updated README
          with open("README.md", "w") as f:
              f.write(readme)
          EOF
          python update_readme.py

      - name: Commit and push README changes
        if: github.ref == 'refs/heads/main' # Only run on main branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit to README.md"
          else
            git commit -m "docs: Update coverage report in README [skip ci]"
            git push
          fi
